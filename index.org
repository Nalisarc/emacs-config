#+Title: Emacs Customization and Setup
#+Author: Î”elta A Bates-Smith
#+Email: nalisarc@gmail.com
#+STARTUP: overview


* TODO Useful Constants
#+name: constants
#+begin_src elisp
  (setq agcloud-dir "~/agcloud/")
#+end_src

#+RESULTS: agcloud
: ~/agcloud/bibliography/

* How to smartly combine path names
#+begin_src elisp
  (concat "~/Test/" "foo.bar")
#+end_src

#+RESULTS:
: ~/Test/foo.bar

* TODO Refactor working modules to use use-package + straight
* Straight

 Straight is a package manager that aims to be an inplace replacement for package.el
The main advantage of which is the ability to easily specify the place to install the package from.

We install straight with:
#+name: straight
#+BEGIN_SRC elisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
	 (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
	(bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
	  (url-retrieve-synchronously
	   "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
	   'silent 'inhibit-cookies)
	(goto-char (point-max))
	(eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
#+END_SRC

* Use Package
  :PROPERTIES:
  :header-args: :noweb-ref use-package
  :END:
After straight is installed we can have it install use-package which will greatly simplify configuration.
#+begin_src elisp
  (straight-use-package 'use-package)
  (straight-use-package 'use-package-hydra)
#+end_src

#+RESULTS:
: t

* Helm
  :PROPERTIES:
  :header-args: :noweb-ref helm
  :END:
#+BEGIN_SRC elisp
  (use-package helm
    :straight t
    :bind (("C-c h" . helm-command-prefix)
	   ("M-x" . helm-M-x)
	   ("C-x r b" . helm-filtered-bookmarks)
	   ("C-x C-f" . helm-find-files)
	   ("C-x b" . helm-mini)
	   ("M-y" . helm-show-kill-ring))
    :config
    (helm-mode 1)
    )
#+END_SRC

#+RESULTS:
: helm-occur

* Helm Bibtex
#+name: helm-bibtex
#+BEGIN_SRC elisp
  (use-package helm-bibtex
    :straight t
    :config
    (setq bib-dir (concat (file-name-as-directory agcloud-dir) "bibliography/")
	  bibtex-completion-bibliography (concat (file-name-as-directory bib-dir) "references.bib")
	  bibtex-completion-library-path (concat (file-name-as-directory bib-dir) "bibtex-pdfs")
	  bibtex-completion-notes-path (concat (file-name-as-directory bib-dir) "bibtex-notes")
	  ))
#+END_SRC

* Dashboard
:PROPERTIES:
:header-args: :noweb-ref dashboard
:END:

#+begin_src elisp
  (use-package dashboard
    :straight t
    :config
    (dashboard-setup-startup-hook))
#+end_src

#+RESULTS:
: t

* BBDB
:PROPERTIES:
:header-args: :noweb-ref bbdb
:END:

#+begin_src elisp
  (use-package bbdb
    :straight t)

  (use-package helm-bbdb
    :straight t
    :after (helm bbdb)
    )
#+end_src

#+RESULTS:

* Org
  :PROPERTIES:
  :header-args: :noweb-ref org
  :END:

#+BEGIN_SRC elisp
  (use-package org
    :straight t
    :bind (("C-c l" . org-store-link)
	   ("C-c a" . org-agenda)
	   ("C-c c" . org-capture))
    :config
    (setq indent-tabs-mode nil
	  org-src-preserve-indentation nil)
    (require 'org-protocol)
  
  )
#+END_SRC

#+RESULTS:
: org-capture

** Latex macro
#+begin_src elisp
  (add-to-list 'org-src-lang-modes '("latex-macros" . latex))
  
  (defvar org-babel-default-header-args:latex-macros
    '((:results . "raw")
      (:exports . "results")))
  
  (defun prefix-all-lines (pre body)
    (with-temp-buffer
      (insert body)
      (string-insert-rectangle (point-min) (point-max) pre)
      (buffer-string)))
  
  (defun org-babel-execute:latex-macros (body _params)
    (concat
     (prefix-all-lines "#+LATEX_HEADER: " body)
     "\n#+HTML_HEAD_EXTRA: <div style=\"display: none\"> \\(\n"
     (prefix-all-lines "#+HTML_HEAD_EXTRA: " body)
     "\n#+HTML_HEAD_EXTRA: \\)</div>\n"))
#+end_src

** inline Javascript
#+begin_src elisp
  (add-to-list 'org-src-lang-modes '("inline-js" . javascript))
  (defvar org-babel-default-header-args:inline-js
    '((:results . "html")
      (:exports . "results")))
  (defun org-babel-execute:inline-js (body _params)
    (format "<script type=\"text/javascript\">\n%s\n</script>" body))
#+end_src

** Roam
#+BEGIN_SRC elisp
  (use-package org-roam
    :straight t
    :init
    (setq org-roam-v2-ack t
	  org-roam-directory (concat
			      (file-name-as-directory agcloud-dir) "org-roam/")
	  )
  

    :bind (("C-c n i" . org-roam-node-insert)
	   ("C-c n f" . org-roam-node-find)
	   ("C-c n l" . 'org-roam-buffer-toggle)
	   ("C-c n d" . 'org-roam-capture-today))
    :after (org)

    :config
    (setq org-roam-db-location (concat org-roam-directory "org-roam.db"))
    (org-roam-setup))

#+END_SRC

#+RESULTS:
: org-roam-capture-today

** Ref
#+BEGIN_SRC elisp
  (use-package org-ref
    :straight t
    :config
    (setq bib-dir (concat (file-name-as-directory agcloud-dir) "bibliography/")
	  reftex-default-bibliography (concat (file-name-as-directory bib-dir) "references.bib")
	  org-ref-bibliography-notes (concat (file-name-as-directory bib-dir) "notes.org")
	  org-ref-pdf-directory (concat (file-name-as-directory bib-dir) "bibtex-pdfs/")
	  org-latex-pdf-process (list "latexmk -shell-escape -bibtex -f -pdf %f")
	  bibtex-completion-pdf-open-function 'org-open-file)
    )
#+END_SRC

** Noter
#+BEGIN_SRC elisp
  (use-package org-noter
    :straight t
    )
#+END_SRC

** Capture
#+begin_src elisp
  (setq org-capture-templates
	'(
	  ("t" "Todo" entry (file+headline "~/agcloud/org/inbox.org" "Inbox")
	   "* TODO %?\n ")
	  ("e" "Entry" entry(file+headline "~/agcloud/org/inbox.org" "Inbox")
	   "* %?\n ")
	  ))
#+end_src

** TODO Agenda
#+begin_src elisp
  (setq org-agenda-files '("~/agcloud/org/inbox.org"
			     "~/agcloud/org/gtd.org"
			     "~/agcloud/org/tickler.org"))
  
  (setq org-agenda-custom-commands 
	'(("o" "At the office" tags-todo "@office"
	   ((org-agenda-overriding-header "Office")
	    (org-agenda-skip-function #'my-org-agenda-skip-all-siblings-but-first)))))
  
  (defun my-org-agenda-skip-all-siblings-but-first ()
    "Skip all but the first non-done entry."
    (let (should-skip-entry)
      (unless (org-current-is-todo)
	(setq should-skip-entry t))
      (save-excursion
	(while (and (not should-skip-entry) (org-goto-sibling t))
	  (when (org-current-is-todo)
	    (setq should-skip-entry t))))
      (when should-skip-entry
	(or (outline-next-heading)
	    (goto-char (point-max))))))
  
  (defun org-current-is-todo ()
    (string= "TODO" (org-get-todo-state)))
#+end_src

#+RESULTS:
: org-current-is-todo

** Refile
#+begin_src elisp
   (setq org-refile-targets '(("~/agcloud/org/gtd.org" :maxlevel . 3)
			       ("~/agcloud/org/someday.org" :level . 1)
			       ("~/agcloud/org/tickler.org" :maxlevel . 2)))
#+end_src

#+RESULTS:
: ((~/agcloud/org/gtd.org :maxlevel . 3) (~/agcloud/org/someday.org :level . 1) (~/agcloud/org/tickler.org :maxlevel . 2))

** TODO Flash Cards
#+BEGIN_SRC emacs-lisp
  (use-package org-fc
    :straight (:type git
		     :repo "https://git.sr.ht/~l3kn/org-fc"
		     :files (:defaults "awk" "demo.org")
		     )
    )
#+END_SRC

#+RESULTS:

** roam-bibtex
#+BEGIN_SRC elisp
(straight-use-package 'org-roam-bibtex)
(add-hook 'org-roam-mode-hook #'org-roam-bibtex-mode)
#+END_SRC

** TODO Org-Download
#+BEGIN_SRC emacs-lisp
  (use-package org-download
    :straight t
    :hook (dired-mode-hook . org-download-enable)
    )

#+END_SRC

#+RESULTS:

** ob-ipython
#+begin_src elisp
  (use-package ob-ipython
    :straight t
    )
#+end_src

#+RESULTS:
: ob-ipython

** ob-scad
#+begin_src elisp
  (use-package ob-scad
    :straight (:type git :host github :repo "wose/ob-scad"))
#+end_src

** ob-async
#+begin_src elisp
  (use-package ob-async
    :straight t)
#+end_src

#+RESULTS:
| ipython |

** load all babel languages
#+begin_src elisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (ipython . t)
     (scad . t)
     (shell . t)
     ))
#+end_src

#+RESULTS:


* Yasnippet
  :PROPERTIES:
  :header-args: :noweb-ref yasnippet
  :END:

#+BEGIN_SRC elisp
  (use-package yasnippet
    :straight t
    :config
    (yas-global-mode 1)
    )

  (use-package yasnippet-snippets
    :straight t)
#+END_SRC

* Disable Toolbar
#+name: disable-toolbar
#+BEGIN_SRC elisp
(menu-bar-mode -1)
(tool-bar-mode -1) 
(toggle-scroll-bar -1) 
#+END_SRC

* Custom File

#+name: custom-file
#+BEGIN_SRC elisp
;; https://stackoverflow.com/questions/14071991/how-to-create-an-empty-file-by-elisp
(defconst custom-file (expand-file-name "custom.el" user-emacs-directory))
(unless (file-exists-p custom-file)
  (write-region "" nil custom-file))

(load-file custom-file)

#+END_SRC

* Theme
#+name: theme
#+BEGIN_SRC elisp
(straight-use-package 'weyland-yutani-theme)
(load-theme `weyland-yutani t)
#+END_SRC

* Pdf Tools
#+name: pdf-tools
#+BEGIN_SRC elisp
  (use-package pdf-tools
    :straight t
    :config
    (pdf-tools-install))
#+END_SRC

* Magit
#+name: magit
#+BEGIN_SRC elisp
  (use-package magit
    :straight t)
#+END_SRC

* Allow y/n instead of yes/no
#+name: y-n-p
#+begin_src elisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+end_src

* Crux
:PROPERTIES:
:header-args: :noweb-ref crux
:END:

Crux is the helpful functions from prelude, without needing to use prelude
#+begin_src elisp
  (use-package crux
    :straight t)
#+end_src

* Super Save
:PROPERTIES:
:header-args: :noweb-ref super-save
:END:

Better save utility from prelude without prelude
#+begin_src elisp
  (use-package super-save
    :straight t
    :config
    (super-save-mode +1)
    (setq auto-save-default nil
	  super-save-exclude '(".gpg")
	  super-save-remote-files nil)
    (add-to-list 'super-save-hook-triggers 'find-file-hook))
#+end_src

#+RESULTS:
: t

* Flyspell
:PROPERTIES:
:header-args: :noweb-ref flyspell
:END:

#+begin_src elisp
  (use-package flyspell
    :straight t
    :config
    (setq ispell-program-name "aspell"
	  ispell-extra-args '("--sug-mode=ultra"))
    )
#+end_src

* Flycheck
:PROPERTIES:
:header-args: :noweb-ref flycheck
:END:

#+begin_src elisp
  (use-package flycheck
    :straight t
    :config
    (global-flycheck-mode 1)
    )
#+end_src

#+RESULTS:
: t

* Company
:PROPERTIES:
:header-args: :noweb-ref company
:END:

#+begin_src emacs-lisp
  (use-package company
    :straight t
    :config (global-company-mode 1)
    )
#+end_src

#+RESULTS:
: t

* Nov
:PROPERTIES:
:header-args: :noweb-ref nov
:END:

#+begin_src elisp
  (use-package nov
    :straight t
    :config
    (setq nov-text-width 80)
    :mode "\\.epub\\'")
#+end_src

* Elpy
:PROPERTIES:
:header-args: :noweb-ref elpy
:END:

Install elpy using:
#+begin_src elisp
  (use-package elpy
    :straight t
    :init
    (setq elpy-rpc-python-command "python3")
    :config
    (elpy-enable))
#+end_src

#+RESULTS:

* Save backups in one place
#+name: set-backup-dir
#+begin_src elisp
  ;; store all backup and autosave files in the tmp dir
  (setq backup-directory-alist
	`((".*" . ,temporary-file-directory)))
  (setq auto-save-file-name-transforms
	`((".*" ,temporary-file-directory t)))
#+end_src

* Main
  
#+name: init.el
#+BEGIN_SRC elisp :tangle init.el :noweb yes
  <<straight>>

  <<use-package>>

  <<constants>>

  <<dashboard>>

  <<y-n-p>>

  <<helm>>

  <<helm-bibtex>>

  <<org>>

  <<disable-toolbar>>

  <<custom-file>>

  <<yasnippet>>

  <<theme>>

  <<pdf-tools>>

  <<magit>>

  <<crux>>

  <<super-save>>

  <<flyspell>>

  <<flycheck>>

  <<company>>

  <<nov>>

  <<elpy>>

  <<set-backup-dir>>

  <<bbdb>>
#+END_SRC
