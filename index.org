#+Title: Emacs Configuration
#+Author: Delta Alexander Sharp
#+Email: nalisarc@gmail.com
#+STARTUP: beamer
* Export Setting                                                   :noexport:
#+DESCRIPTION: 
#+KEYWORDS: 
#+LANGUAGE:  en
#+OPTIONS:   H:2 num:t toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:https://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+HTML_LINK_UP:
#+HTML_LINK_HOME:

#+beamer_theme: EastLansing

#+COLUMNS: %40ITEM %10BEAMER_env(Env) %9BEAMER_envargs(Env Args) %4BEAMER_col(Col) %10BEAMER_extra(Extra)


* Bootstrap Straight and Use-package
#+name: early-init
#+begin_src emacs-lisp :tangle early-init.el 
;; Disable package.el in favor of straight.el
(setq package-enable-at-startup nil)
#+end_src

#+name: setup-straight
#+begin_src emacs-lisp :noweb yes 
;; Install straight.el
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 6))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
	(url-retrieve-synchronously
	 "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
	 'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
;; ensure correct org
(straight-use-package 'org)

;; Install use-package
(straight-use-package 'use-package)

;; Configure use-package to use straight.el by default
(use-package straight
  :custom
  (straight-use-package-by-default t))

<<exec-path-from-shell>>

(use-package use-package-hydra)

(use-package use-package-ensure-system-package
  :ensure t)

(use-package use-package-chords
  :ensure t
  :config (key-chord-mode 1))

#+end_src
* exec-path-from-shell
#+name: exec-path-from-shell
#+begin_src emacs-lisp
(when (memq window-system '(mac ns x))
(use-package exec-path-from-shell
  :ensure t
  :config
  (exec-path-from-shell-initialize)))
#+end_src

#+RESULTS: exec-path-from-shell
: t

* Term
#+name: term
#+begin_src emacs-lisp
(use-package term
  :bind (("C-c t" . term)
         :map term-mode-map
         ("M-p" . term-send-up)
         ("M-n" . term-send-down)
         :map term-raw-map
         ("M-o" . other-window)
         ("M-p" . term-send-up)
         ("M-n" . term-send-down)))
#+end_src

#+RESULTS:

* Projectile
#+name: projectile
#+begin_src emacs-lisp
(use-package projectile
  :bind-keymap
  ("C-c p" . projectile-command-map))
#+end_src
* Org
#+name: org
#+begin_src emacs-lisp :noweb yes 
(use-package org
  :ensure t

  :bind (("C-c l" . org-store-link)
	 ("C-c a" . org-agenda)
	 ("C-c c" . org-capture))

  :config
  (require 'org-protocol)
  (setq indent-tabs-mode nil)
  (setq org-src-preserve-indentation t)
  (require 'ob-org)
  (require 'ob-shell)
  (require 'ob-latex)
  <<org-agenda>>
  <<org-capture-templates>>
  <<org-refile>>

  )

<<org-roam>>

<<org-ref>>



<<org-download>>

<<org-noter>>

<<org-fc>>
#+end_src
** Agenda
#+name: org-agenda
#+begin_src emacs-lisp
(setq org-agenda-files '("~/agcloud/org/gtd.org"
			 "~/agcloud/org/tickler.org"
			 "~/agcloud/org/inbox.org"
			 ))

(setq org-agenda-custom-commands 
      '(
	("w" "At work" tags-todo "@work"
	 ((org-agenda-overriding-header "Work")
	  (org-agenda-skip-function #'my-org-agenda-skip-all-siblings-but-first)
	  ))
	("h" "At home" tags-todo "@home"
	 	 ((org-agenda-overriding-header "Home")
	  (org-agenda-skip-function #'my-org-agenda-skip-all-siblings-but-first)
	  ))
	))

(defun my-org-agenda-skip-all-siblings-but-first ()
  "Skip all but the first non-done entry."
  (let (should-skip-entry)
    (unless (org-current-is-todo)
      (setq should-skip-entry t))
    (save-excursion
      (while (and (not should-skip-entry) (org-goto-sibling t))
	(when (org-current-is-todo)
	  (setq should-skip-entry t))))
    (when should-skip-entry
      (or (outline-next-heading)
	  (goto-char (point-max))))))

(defun org-current-is-todo ()
  (string= "TODO" (org-get-todo-state)))
#+end_src

** Capture Templates
#+name: org-capture-templates
#+begin_src emacs-lisp
(setq org-capture-templates
      '(
	("t" "Todo" entry (file+headline "~/agcloud/org/inbox.org" "Inbox")
	 "* TODO %?\n ")
	("e" "Entry" entry(file+headline "~/agcloud/org/inbox.org" "Inbox")
	 "* %?\n ")
	))
#+end_src

** Refile target
#+name: org-refile
#+begin_src emacs-lisp
(setq org-refile-targets '(("~/agcloud/org/gtd.org" :maxlevel . 3)
			   ("~/agcloud/org/someday.org" :level . 1)
			   ("~/agcloud/org/tickler.org" :maxlevel . 2)))
#+end_src


** Org Roam
#+name: org-roam
#+begin_src emacs-lisp :noweb yes 
(use-package org-roam
  :after org
  :init
  (setq org-roam-v2-ack t)
  
  :config
  (require 'org-roam-protocol)
  (org-roam-setup)

  :custom
  (org-roam-db-location "~/.emacs.d/org-roam.db")
  (org-roam-directory "~/agcloud/org-roam")
  (org-roam-completion-everywhere t)
  <<roam-capture-templates>>
  
  


  :bind
  ("C-c n i" . org-roam-node-insert)
  ("C-c n f" . org-roam-node-find)
  ("C-c n l" . org-roam-buffer-toggle)
  ("C-c n d" . org-roam-dailies-capture-today)
  ("C-c n r" . org-roam-node-random)
  )
#+end_src

#+RESULTS: org-roam
: org-roam-node-random

*** Roam capture templates
#+name: roam-capture-templates
#+begin_src emacs-lisp :noweb yes 
(org-roam-capture-templates
 '(
   <<roam-default>>
   <<roam-book>>
   <<roam-website>>
   <<roam-video>>
   <<roam-project>>
   ))
#+end_src

**** Link drawer
#+name: link-drawer
#+begin_src org
\n* Links \n [[id:24586-3012-4104-b65b-bf2a2e526a18][Roam Index]]
#+end_src

**** default
#+name: roam-default
#+begin_src emacs-lisp :noweb yes 
("d" "default" plain
 "%?"
 :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n <<link-drawer>>")
 :unnarrowed t)
#+end_src

**** book
#+name: roam-book
#+begin_src emacs-lisp :noweb yes 
("b" "book" plain
   "\n* Source\n\nAuthor: %^{Author}\nTitle: ${title}\nYear: %^{Year}\n\n* Summary\n\n%?"
   :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n <<link-drawer>>")
   :unnarrowed t)
#+end_src
**** website
#+name: roam-website
#+begin_src emacs-lisp :noweb yes 
("w" "website" plain
   "\n* Source\n\nURL: %^{URL}\nTitle: ${title}\nAccessed-On: %<%Y%m%d>\n\n* Summary\n\n%?"
   :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n <<link-drawer>>")
   :unnarrowed t)
#+end_src
**** video
#+name: roam-video
#+begin_src emacs-lisp :noweb yes 
("v" "video" plain
   "\n* Source\n\nURL: %^{URL}\nTitle: ${title}\nAccessed-On: %<%Y%m%d>\n\n* Summary\n\n%?"
   :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n <<link-drawer>>")
   :unnarrowed t)
#+end_src
**** Project
#+name: roam-project
#+begin_src emacs-lisp :noweb yes 
("p" "project" plain "* Goals\n\n%?\n\n* Tasks\n\n** TODO Add initial tasks\n\n* Dates\n\n"
 :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+filetags: Project \n\n <<link-drawer>>")
 :unnarrowed t)
#+end_src

** Org Ref
#+name: org-ref
#+begin_src emacs-lisp
(use-package org-ref
  :straight (org-ref :type git :host github :repo "jkitchin/org-ref")
  :after (org helm-bibtex hydra)
  :init
  (require 'bibtex)
  

  (setq reftex-default-bibliography "~/agcloud/org-roam/references.bib")
  (setq bibtex-autokey-year-length 4
      bibtex-autokey-name-year-separator "-"
      bibtex-autokey-year-title-separator "-"
      bibtex-autokey-titleword-separator "-"
      bibtex-autokey-titlewords 2
      bibtex-autokey-titlewords-stretch 1
      bibtex-autokey-titleword-length 5)

:config
(setq org-ref-bibliography-notes  "~/agcloud/org-roam/index.org"
      org-ref-default-bibliography "~/agcloud/org-roam/references.bib"
      org-ref-pdf-directory "~/agcloud/Books")

(require 'org-ref-helm)

:bind
("C-c r" . org-ref-bibtex-hydra/body)
)
#+end_src

** Org Download
#+name: org-download
#+begin_src emacs-lisp
(use-package org-download
  :ensure-system-package xclip
  :after org
  :config
  (setq org-download-image-dir "~/agcloud/org-roam/media/images")
  ;; Drag-and-drop to `dired`
  (add-hook 'dired-mode-hook 'org-download-enable)
  )
#+end_src


** Org-fc
#+name: org-fc
#+begin_src elisp
(use-package org-fc
   :ensure-system-package gawk
   :after (org)
   :custom (org-fc-directories "~/agcloud/org-roam")
   :config
   (require 'org-fc-hydra)
   )
#+end_src

#+RESULTS: org-fc
: t


** Org Noter
#+name: org-noter
#+begin_src emacs-lisp
(use-package org-noter
  :after (org pdf-tools nov)
  :config
  (setq org-noter-doc-property-in-notes t)
  )
#+end_src

* Python
#+name: python
#+begin_src emacs-lisp :noweb yes 
(use-package python
  :ensure-system-package python3
  
  :mode ("\\.py\\'" . python-mode)
        ("\\.wsgi$" . python-mode)
  :interpreter ("python" . python-mode)

  :config
  (setq python-indent-offset 4))

<<elpy>>

<<ob-ipython>>

<<pyenv-mode>>

<<python-jedi>>

<<anaconda-mode>>
#+end_src

** Ob-ipython
#+name: ob-ipython
#+begin_src emacs-lisp
(use-package ob-ipython
  :after (:all org)
  :ensure-system-package
   (jupyter . "pip3 install jupyter")
   )
#+end_src

** Elpy
#+name: elpy
#+begin_src emacs-lisp
(use-package elpy
  :commands elpy-enable
  :init (with-eval-after-load 'python (elpy-enable))

  :config
  (delete 'elpy-module-highlight-indentation elpy-modules)
  (delete 'elpy-module-flymake elpy-modules)

  (defun ha/elpy-goto-definition ()
    (interactive)
    (condition-case err
        (elpy-goto-definition)
      ('error (xref-find-definitions (symbol-name (symbol-at-point))))))

  :bind (:map elpy-mode-map ([remap elpy-goto-definition] .
                             ha/elpy-goto-definition)))
#+end_src

** pyenv-mode
#+name: pyenv-mode
#+begin_src emacs-lisp
(use-package pyenv-mode
  :ensure t
  :after (exec-path-from-shell)
  :config
    (defun projectile-pyenv-mode-set ()
      "Set pyenv version matching project name."
      (let ((project (projectile-project-name)))
        (if (member project (pyenv-mode-versions))
            (pyenv-mode-set project)
          (pyenv-mode-unset))))

    (add-hook 'projectile-switch-project-hook 'projectile-pyenv-mode-set)
    (add-hook 'python-mode-hook 'pyenv-mode))
#+end_src

** Jedi
#+name: python-jedi
#+begin_src emacs-lisp
(use-package jedi
  :ensure t
  :after (exec-path-from-shell)
  :init
  (add-to-list 'company-backends 'company-jedi)
  :config
  (use-package company-jedi
    :ensure t
    :init
    (add-hook 'python-mode-hook (lambda () (add-to-list 'company-backends 'company-jedi)))
    (setq company-jedi-python-bin "python")))
#+end_src

** anaconda-mode
#+name: anaconda-mode
#+begin_src emacs-lisp
(use-package anaconda-mode
  :ensure t
  :after (exec-path-from-shell)
  :init (add-hook 'python-mode-hook 'anaconda-mode)
        (add-hook 'python-mode-hook 'anaconda-eldoc-mode)
  :config (use-package company-anaconda
            :ensure t
            :init (add-hook 'python-mode-hook 'anaconda-mode)
            (eval-after-load "company"
              '(add-to-list 'company-backends '(company-anaconda :with company-capf)))))
#+end_src

* Yasnippet
#+name: yasnippet
#+begin_src emacs-lisp
(use-package yasnippet
  :config
  (yas-global-mode)
  (use-package yasnippet-snippets))
#+end_src

* Flycheck
#+name: flycheck
#+begin_src emacs-lisp
(use-package flycheck)
#+end_src

* Flyspell
#+name: flyspell
#+begin_src emacs-lisp
(use-package flyspell
  :ensure-system-package aspell
  :config
  (setq ispell-program-name "aspell" ; use aspell instead of ispell
	ispell-extra-args '("--sug-mode=ultra")))
#+end_src

* BBDB
#+name: BBDB
#+begin_src emacs-lisp
(use-package bbdb
  :after (helm)
  :config
  (use-package helm-bbdb))
#+end_src

* Company
#+name: company
#+begin_src emacs-lisp
(use-package company
  :hook
  (after-init . global-company-mode))
#+end_src

* Crux
#+name: crux
#+begin_src emacs-lisp
(use-package crux)
#+end_src

* Super-save
#+name: super-save
#+begin_src emacs-lisp
(use-package super-save
  :config
  (setq auto-save-default nil)
  (setq super-save-exclude '(".gpg"))
  (setq super-save-remote-files nil)
  :hook
  (find-file super-save-hook-trigger))
#+end_src


* Hydra
#+name: hydra
#+begin_src emacs-lisp
(use-package hydra)
#+end_src

* Helm
#+name: helm
#+begin_src emacs-lisp :noweb yes 
(use-package helm
  :config
  (helm-mode 1)
  (global-unset-key (kbd "C-x c"))
  :bind
  (
   	   ("M-x" . helm-M-x)
	   ("C-x r b" . helm-filtered-bookmarks)
	   ("C-x C-f" . helm-find-files)
	   ("C-x b". helm-mini)
	   ("M-y" . helm-show-kill-ring)
	   ("C-c h o" . helm-occur)
	   :map helm-command-map
	   ("C-c h" . helm-command-prefix)
	   ("<tab>" . helm-execute-persistent-action)
	   ("C-i" . helm-execute-persistent-action)
	   ("C-z" . helm-select-action))

   )
<<helm-bibtex>>
#+end_src

** helm-bibtex
#+name: helm-bibtex
#+begin_src emacs-lisp
(use-package helm-bibtex
  :ensure t
  :demand t)
#+end_src

* Dashboard
#+name: dashboard
#+begin_src emacs-lisp
(use-package dashboard
  :init
  (setq dashboard-banner-logo-title "Emacs")
  (setq dashboard-startup-banner 'logo)
  (setq dashboard-center-content t)

  :config
  (dashboard-setup-startup-hook)
  (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
  )
#+end_src
* edit-sever
#+name: edit-server
#+begin_src emacs-lisp
(use-package edit-server
  :if window-system
  :init
  (add-hook 'after-init-hook 'server-start t)
  (add-hook 'after-init-hook 'edit-server-start t))
#+end_src
* pdf-tools
#+name: pdf-tools
#+begin_src emacs-lisp
(use-package pdf-tools
  :magic ("%PDF" . pdf-view-mode)
  :config
  (pdf-tools-install :no-query))
#+end_src

#+RESULTS: pdf-tools
: ((%EPUB . nov-mode) (%PDF . pdf-view-mode) (%EPUB . pdf-view-mode))

* nov
#+name: nov
#+begin_src emacs-lisp
(use-package nov
  :magic ("%EPUB" . nov-mode)
  :config
  (setq nov-text-width 90)
  (defun my-nov-font-setup ()
    (face-remap-add-relative 'variable-pitch :family "OpenDyslexic"
			     :height 1.0))
  (add-hook 'nov-mode-hook 'my-nov-font-setup)
  )
#+end_src

#+RESULTS: nov
: ((%EPUB . nov-mode) (%PDF . pdf-view-mode) (%EPUB . pdf-view-mode))

* Misc

** theme
#+name: theme
#+begin_src emacs-lisp
(use-package zeno-theme)
#+end_src

** disable fluff
#+name: disable-fluff
#+begin_src emacs-lisp
(menu-bar-mode -1)
(tool-bar-mode -1) 
(toggle-scroll-bar -1)
#+end_src

** ease of use
#+name: ease-of-use-stuff
#+begin_src emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p) ;;Ease of use
#+end_src


* Main

#+begin_src emacs-lisp :noweb yes :tangle init.el
<<setup-straight>>

<<helm>>

<<hydra>>

<<company>>

<<projectile>>

<<edit-server>>

<<org>>

<<python>>

<<nov>>

<<pdf-tools>>

<<yasnippet>>

<<dashboard>>

<<crux>>

<<super-save>>

<<flyspell>>

<<flycheck>>

<<bbdb>>

<<theme>>

<<disable-fluff>>

<<ease-of-use-stuff>>
#+end_src

#+RESULTS:

* Tests

#+name: does-python-work
#+begin_src ipython :session test :results raw replace output drawer 
import random
x = random.randint(0,10)
y = random.randint(10,100)
print(x + y)
#+end_src

#+RESULTS: does-python-work
:results:
28
:end:




