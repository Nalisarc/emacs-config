#+Title: Emacs Customization and Setup
#+Author: Î”elta A Bates-Smith
#+Email: nalisarc@gmail.com
#+STARTUP: overview

* Straight
  :PROPERTIES:
  :header-args: :noweb-ref straight
  :END:
#+BEGIN_SRC elisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
	 (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
	(bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
	  (url-retrieve-synchronously
	   "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
	   'silent 'inhibit-cookies)
	(goto-char (point-max))
	(eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
#+END_SRC

* Helm
  :PROPERTIES:
  :header-args: :noweb-ref helm
  :END:
#+BEGIN_SRC elisp
  (straight-use-package 'helm)
  (helm-mode 1)
  (global-set-key (kbd "C-c h") 'helm-command-prefix)
  (global-unset-key (kbd "C-x c"))

  (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action) ; rebind tab to do persistent action
  (define-key helm-map (kbd "C-i") 'helm-execute-persistent-action) ; make TAB works in terminal
  (define-key helm-map (kbd "C-z")  'helm-select-action) ; list actions using C-z

  (global-set-key (kbd "M-x") #'helm-M-x)
  (global-set-key (kbd "C-x r b") #'helm-filtered-bookmarks)
  (global-set-key (kbd "C-x C-f") #'helm-find-files)
  (global-set-key (kbd "C-x b") 'helm-mini)
  (global-set-key (kbd "M-y") 'helm-show-kill-ring)
  (global-set-key (kbd "C-c h o") 'helm-occur)
#+END_SRC

* Helm Bibtex
#+name: helm-bibtex
#+BEGIN_SRC elisp
  (straight-use-package 'helm-bibtex)

  (setq bibtex-completion-bibliography "~/agcloud/bibliography/references.bib"
	bibtex-completion-library-path "~/agcloud/bibliography/bibtex-pdfs"
	bibtex-completion-notes-path "~/agcloud/bibliography/bibtex-notes")
#+END_SRC

* Org
  :PROPERTIES:
  :header-args: :noweb-ref org
  :END:

#+BEGIN_SRC elisp
  (straight-use-package 'org)
  (require 'org-protocol)
  
  (setq indent-tabs-mode nil)
  (setq org-src-preserve-indentation nil)
  
  (global-set-key (kbd "C-c l") 'org-store-link)
  (global-set-key (kbd "C-c a") 'org-agenda)
  (global-set-key (kbd "C-c c") 'org-capture)
#+END_SRC

** Latex macro
#+begin_src elisp
  (add-to-list 'org-src-lang-modes '("latex-macros" . latex))
  
  (defvar org-babel-default-header-args:latex-macros
    '((:results . "raw")
      (:exports . "results")))
  
  (defun prefix-all-lines (pre body)
    (with-temp-buffer
      (insert body)
      (string-insert-rectangle (point-min) (point-max) pre)
      (buffer-string)))
  
  (defun org-babel-execute:latex-macros (body _params)
    (concat
     (prefix-all-lines "#+LATEX_HEADER: " body)
     "\n#+HTML_HEAD_EXTRA: <div style=\"display: none\"> \\(\n"
     (prefix-all-lines "#+HTML_HEAD_EXTRA: " body)
     "\n#+HTML_HEAD_EXTRA: \\)</div>\n"))
#+end_src

** inline Javascript
#+begin_src elisp
  (add-to-list 'org-src-lang-modes '("inline-js" . javascript))
  (defvar org-babel-default-header-args:inline-js
    '((:results . "html")
      (:exports . "results")))
  (defun org-babel-execute:inline-js (body _params)
    (format "<script type=\"text/javascript\">\n%s\n</script>" body))
#+end_src

** TODO Roam
#+BEGIN_SRC elisp
  (setq org-roam-v2-ack t)
    (straight-use-package 'org-roam)
    (require 'org-roam-protocol)
  
  
    (unless (executable-find "sqlite3")
      (add-to-list 'exec-path "path/to/sqlite3") ; TODO REPLACE WITH VARIABLES
      )
  
    (setq org-roam-directory "~/agcloud/org-roam/") ; TODO REPLACE WITH VARIABLE
    (unless (file-directory-p org-roam-directory)
      (make-directory org-roam-directory)
      )
  
    (with-eval-after-load 'org
    (progn
      (setq org-roam-v2-ack t) ;; acknowledge upgrade and remove warning at startup
      (setq org-roam-db-location
	    (concat org-roam-directory "org-roam.db"))
      (org-roam-setup)
  
    (global-set-key (kbd "C-c n i") 'org-roam-node-insert)
    (global-set-key (kbd "C-c n f") 'org-roam-node-find)
    (global-set-key (kbd "C-c n l") 'org-roam-buffer-toggle)
    (global-set-key (kbd "C-c n d") 'org-roam-capture-today)
  
    ))
#+END_SRC

#+RESULTS:
: org-roam-capture-today

** TODO Ref
#+BEGIN_SRC elisp
(straight-use-package 'org-ref)
(setq org-latex-pdf-process (list "latexmk -shell-escape -bibtex -f -pdf %f"))

(setq reftex-default-bibliography '("~/agcloud/bibliography/references.bib"))

(setq org-ref-bibliography-notes "~/agcloud/bibliography/notes.org"
      org-ref-default-bibliography '("~/agcloud/bibliography/references.bib")
      org-ref-pdf-directory "~/agcloud/bibliography/bibtex-pdfs/")
t
(setq bibtex-completion-pdf-open-function 'org-open-file)
#+END_SRC

** TODO Noter
#+BEGIN_SRC elisp
(straight-use-package 'org-noter)
#+END_SRC

** TODO Capture
#+begin_src elisp
  (setq org-capture-templates
	'(
	  ("t" "Todo" entry (file+headline "~/agcloud/org/inbox.org" "Inbox")
	   "* TODO %?\n ")
	  ("e" "Entry" entry(file+headline "~/agcloud/org/inbox.org" "Inbox")
	   "* %?\n ")
	  ))
#+end_src

** TODO Agenda
#+begin_src elisp
    (setq org-agenda-custom-commands 
	  '(("o" "At the office" tags-todo "@office"
	     ((org-agenda-overriding-header "Office")
	      (org-agenda-skip-function #'my-org-agenda-skip-all-siblings-but-first)))))
    
    (defun my-org-agenda-skip-all-siblings-but-first ()
      "Skip all but the first non-done entry."
      (let (should-skip-entry)
	(unless (org-current-is-todo)
	  (setq should-skip-entry t))
	(save-excursion
	  (while (and (not should-skip-entry) (org-goto-sibling t))
	    (when (org-current-is-todo)
	      (setq should-skip-entry t))))
	(when should-skip-entry
	  (or (outline-next-heading)
	      (goto-char (point-max))))))
		      
    (defun org-current-is-todo ()
      (string= "TODO" (org-get-todo-state)))
#+end_src

** Refile
#+begin_src elisp
   (setq org-refile-targets '(("~/agcloud/org/gtd.org" :maxlevel . 3)
			       ("~/agcloud/org/someday.org" :level . 1)
			       ("~/agcloud/org/tickler.org" :maxlevel . 2)))
#+end_src

#+RESULTS:
: ((~/agcloud/org/gtd.org :maxlevel . 3) (~/agcloud/org/someday.org :level . 1) (~/agcloud/org/tickler.org :maxlevel . 2))

** TODO Flash Cards
#+BEGIN_SRC emacs-lisp
  (straight-use-package 'hydra)
  
  (straight-use-package
   '(org-fc
     :type git :repo "https://git.sr.ht/~l3kn/org-fc"
     :files (:defaults "awk" "demo.org")
     :custom (org-fc-directories '("~/org/"))))
  
  (require 'org-fc-hydra)
#+END_SRC

** TODO roam-bibtex
#+BEGIN_SRC elisp
(straight-use-package 'org-roam-bibtex)
(add-hook 'org-roam-mode-hook #'org-roam-bibtex-mode)
#+END_SRC

** TODO Org-Download
#+BEGIN_SRC emacs-lisp
(straight-use-package 'org-download)
(add-hook 'dired-mode-hook 'org-download-enable)
#+END_SRC

** TODO ob-ipython
#+begin_src elisp
  (unless (eq system-type 'cygwin)
    (straight-use-package 'ob-ipython)
    (require 'ob-ipython)
    )
    
  (straight-use-package '(ob-scad :type git :host github :repo "wose/ob-scad"))
  (require 'ob-scad)
#+end_src

* Yasnippet
  :PROPERTIES:
  :header-args: :noweb-ref yasnippet
  :END:

#+BEGIN_SRC elisp
(straight-use-package 'yasnippet)
(straight-use-package 'yasnippet-snippets)

(yas-global-mode 1)
#+END_SRC

* Disable Toolbar
#+name: disable-toolbar
#+BEGIN_SRC elisp
(menu-bar-mode -1)
(tool-bar-mode -1) 
(toggle-scroll-bar -1) 
#+END_SRC

* Custom File

#+name: custom-file
#+BEGIN_SRC elisp
;; https://stackoverflow.com/questions/14071991/how-to-create-an-empty-file-by-elisp
(defconst custom-file (expand-file-name "custom.el" user-emacs-directory))
(unless (file-exists-p custom-file)
  (write-region "" nil custom-file))

(load-file custom-file)

#+END_SRC

* Theme
#+name: theme
#+BEGIN_SRC elisp
(straight-use-package 'weyland-yutani-theme)
(load-theme `weyland-yutani t)
#+END_SRC

* Pdf Tools
#+name: pdf-tools
#+BEGIN_SRC elisp
(straight-use-package 'pdf-tools)
(pdf-tools-install)
#+END_SRC

* Magit
#+name: magit
#+BEGIN_SRC elisp
(straight-use-package 'magit)
#+END_SRC

* Allow y/n instead of yes/no
#+name: y-n-p
#+begin_src elisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+end_src

* Crux
:PROPERTIES:
:header-args: :noweb-ref crux
:END:

Crux is the helpful functions from prelude, without needing to use prelude
#+begin_src elisp
(straight-use-package 'crux)
#+end_src

* Super Save
:PROPERTIES:
:header-args: :noweb-ref super-save
:END:

Better save utility from prelude without prelude
#+begin_src elisp
(straight-use-package 'super-save)
  
(super-save-mode +1)
  
(setq auto-save-default nil)
  
(setq super-save-exclude '(".gpg"))
  
(setq super-save-remote-files nil)
  
(add-to-list 'super-save-hook-triggers 'find-file-hook)
#+end_src

* Flyspell
:PROPERTIES:
:header-args: :noweb-ref flyspell
:END:

#+begin_src elisp
(require 'flyspell)
(setq ispell-program-name "aspell" ; use aspell instead of ispell
      ispell-extra-args '("--sug-mode=ultra"))
#+end_src

* Flycheck
:PROPERTIES:
:header-args: :noweb-ref flycheck
:END:

#+begin_src elisp
(straight-use-package 'flycheck)
(straight-use-package 'flycheck-rust)
(add-hook 'after-init-hook #'global-flycheck-mode)
#+end_src

* Company
:PROPERTIES:
:header-args: :noweb-ref company
:END:

#+begin_src emacs-lisp
(straight-use-package 'company)
(add-hook 'after-init-hook 'global-company-mode)
#+end_src

* Nov
:PROPERTIES:
:header-args: :noweb-ref nov
:END:

#+begin_src elisp
  (straight-use-package 'nov)
  (add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode))
  (setq nov-text-width 80)
#+end_src


* Elpy
:PROPERTIES:
:header-args: :noweb-ref elpy
:END:

Install elpy using:
#+begin_src elisp
  (straight-use-package 'elpy)
  (setq elpy-rpc-python-command "python3")
  (elpy-enable)
#+end_src

#+RESULTS:

* Main
  
#+name: early-init.el 
#+BEGIN_SRC elisp :tangle early-init.el :noweb yes 
(setq package-enable-at-startup nil)
#+END_SRC

#+name: init.el
#+BEGIN_SRC elisp :tangle init.el :noweb yes
  <<straight>>
  
  <<y-n-p>>
  
  <<helm>>
  
  <<helm-bibtex>>
  
  <<org>>
  
  <<disable-toolbar>>
  
  <<custom-file>>
  
  <<yasnippet>>
  
  <<theme>>
  
  <<pdf-tools>>
  
  <<magit>>
  
  <<crux>>
  
  <<super-save>>
  
  <<flyspell>>
  
  <<flycheck>>
  
  <<company>>
  
  <<nov>>
  
  <<elpy>>
#+END_SRC

#+RESULTS: init.el


